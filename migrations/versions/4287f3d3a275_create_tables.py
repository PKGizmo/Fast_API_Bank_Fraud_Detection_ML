"""create_tables_user_profile_nextofkin

Revision ID: 4287f3d3a275
Revises: 
Create Date: 2025-07-27 12:52:15.209457

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4287f3d3a275'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=12), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
    sa.Column('middle_name', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
    sa.Column('id_no', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('security_question', sa.Enum('MOTHER_MAIDEN_NAME', 'CHILDHOOD_FRIEND', 'FAVORITE_COLOR', 'BIRTH_CITY', name='securityquestionsschema'), nullable=False),
    sa.Column('security_answer', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
    sa.Column('account_status', sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', 'PENDING', name='accountstatusenum'), nullable=False),
    sa.Column('role', sa.Enum('CUSTOMER', 'ACCOUNT_EXECUTIVE', 'BRANCH_MANAGER', 'ADMIN', 'SUPER_ADMIN', 'TELLER', name='rolechoicesenum'), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('failed_login_attempts', sa.SMALLINT(), nullable=False),
    sa.Column('last_failed_login', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('otp', sqlmodel.sql.sqltypes.AutoString(length=6), nullable=False),
    sa.Column('otp_expiry_time', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_no'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('nextofkin',
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('relationship', sa.Enum('Spouse', 'Parent', 'Child', 'Sibling', 'Other', name='relationshiptypeenum'), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nationality', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('passport_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('profile',
    sa.Column('title', sa.Enum('Mr', 'Mrs', 'Miss', name='salutationenum'), nullable=False),
    sa.Column('gender', sa.Enum('Male', 'Female', name='genderenum'), nullable=False),
    sa.Column('date_of_birth', sa.Date(), nullable=False),
    sa.Column('country_of_birth', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('place_of_birth', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('marital_status', sa.Enum('Married', 'Divorced', 'Single', 'Widowed', name='maritalstatusenum'), nullable=False),
    sa.Column('means_of_identification', sa.Enum('Passport', 'Drivers_License', 'National_ID', name='identificationtypeenum'), nullable=False),
    sa.Column('id_issue_date', sa.Date(), nullable=False),
    sa.Column('id_expiry_date', sa.Date(), nullable=False),
    sa.Column('passport_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nationality', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employment_status', sa.Enum('Employed', 'Unemployed', 'Self_Employed', 'Student', 'Retired', name='employmentstatusenum'), nullable=False),
    sa.Column('employer_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employer_address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('employer_country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('annual_income', sa.Float(), nullable=False),
    sa.Column('date_of_employment', sa.Date(), nullable=False),
    sa.Column('profile_photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id_photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('signature_photo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('profile')
    op.drop_table('nextofkin')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
